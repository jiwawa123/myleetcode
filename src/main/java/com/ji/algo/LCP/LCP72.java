package com.ji.algo.LCP;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * @Author: Bei Chang
 * @Date: 2023/06/04/10:42
 */
public class LCP72 {
    public static void main(String[] args) {
        int[] arr = {247, 722, 315, 414, 767, 663, 432, 21, 451, 659, 892, 226, 853, 68, 853, 884, 855, 463, 917, 214, 912, 433, 827, 443, 419, 733, 851, 266, 447, 176, 796, 873, 843, 244, 758, 780, 866, 299, 184, 263, 991, 914, 398, 425, 79, 119, 812, 12, 175, 435, 661, 835, 643, 640, 718, 477, 468, 559, 96, 821, 216, 548, 314, 149, 451, 178, 117, 118, 301, 946, 330, 735, 890, 239, 862, 796, 622, 727, 770, 125, 718, 338, 692, 549, 602, 111, 687, 291, 658, 294, 458, 886, 424, 238, 965, 17, 665, 403, 953, 497, 128, 535, 137, 320, 500, 152, 923, 765, 928, 540, 399, 517, 466, 306, 392, 767, 935, 429, 90, 881, 686, 209, 972, 184, 937, 744, 914, 21, 742, 210, 175, 729, 920, 409, 600, 415, 981, 264, 1000, 347, 767, 303, 321, 16, 866, 20, 678, 190, 9, 365, 199, 326, 16, 260, 310, 157, 936, 946, 285, 65, 375, 178, 661, 492, 66, 622, 701, 590, 640, 765, 453, 314, 760, 926, 358, 149, 82, 598, 329, 636, 406, 857, 497, 173, 963, 250, 254, 735, 517, 608, 240, 680, 805, 650, 883, 190, 178, 878, 820, 333, 839, 954, 515, 770, 845, 815, 629, 822, 138, 253, 525, 922, 964, 516, 156, 19, 587, 9, 5, 922, 671, 721, 576, 471, 105, 258, 384, 728, 671, 989, 699, 416, 425, 961, 506, 710, 97, 227, 872, 301, 283, 310, 132, 970, 590, 167, 120, 122, 732, 844, 448, 866, 331, 598, 138, 391, 463, 865, 673, 627, 157, 373, 229, 699, 378, 972, 463, 915, 976, 343, 469, 499, 284, 653, 83, 464, 568, 361, 260, 243, 241, 399, 777, 787, 328, 579, 863, 28, 35, 822, 737, 575, 721, 100, 86, 240, 311, 15, 427, 997, 224, 822, 859, 326, 30, 552, 560, 302, 299, 185, 762, 86, 270, 980, 249, 648, 1, 643, 38, 922, 629, 22, 870, 797, 349, 634, 491, 8, 542, 469, 272, 876, 129, 680, 395, 359, 497, 671, 100, 94, 256, 383, 284, 393, 370, 541, 972, 534, 844, 783, 603, 650, 965, 919, 833, 605, 665, 343, 831, 581, 874, 663, 533, 424, 990, 423, 469, 831, 163, 195, 191, 535, 233, 621, 204, 862, 837, 864, 175, 749, 963, 932, 707, 32, 989, 957, 976, 806, 647, 292, 658, 887, 387, 700, 60, 400, 680, 446, 544, 747, 749, 391, 256, 382, 502, 127, 61, 654, 557, 196, 187, 459, 186, 203, 426, 583, 853, 711, 256, 424, 515, 324, 613, 996, 11, 179, 183, 291, 622, 948, 429, 439, 80, 24, 471, 779, 67, 34, 529, 192, 964, 667, 501, 223, 947, 159, 937, 761, 184, 534, 861, 341, 372, 544, 973, 305, 588, 59, 145, 537, 94, 839, 980, 109, 728, 768, 102, 509, 716, 623, 861, 306, 404, 742, 12, 484, 432, 261, 833, 637, 391, 216, 861, 959, 149, 760, 613, 194, 332, 978, 603, 475, 834, 137, 808, 15, 589, 543, 382, 980, 21, 882, 610, 385, 782, 196, 272, 277, 766, 258, 463, 304, 422, 894, 146, 688, 540, 431, 235, 675, 749, 217, 905, 99, 88, 691, 438, 980, 838, 849, 274, 493, 165, 712, 192, 759, 824, 786, 86, 737, 462, 766, 929, 215, 574, 515, 263, 317, 136, 524, 565, 992, 847, 192, 910, 863, 408, 970, 855, 913, 573, 121, 734, 91, 773, 341, 417, 858, 770, 720, 150, 842, 350, 712, 805, 414, 47, 538, 985, 32, 320, 721, 60, 283, 383, 78, 244, 579, 259, 588, 816, 215, 112, 217, 936, 521, 636, 817, 970, 227, 121, 340, 624, 50, 922, 836, 402, 658, 784, 105, 566, 129, 933, 197, 826, 656, 28, 163, 233, 63, 520, 145, 76, 155, 371, 211, 358, 144, 423, 289, 579, 828, 235, 963, 763, 498, 352, 807, 18, 978, 780, 63, 194, 575, 958, 969, 521, 221, 704, 574, 722, 320, 708, 917, 628, 379, 471, 19, 582, 441, 587, 110, 356, 636, 807, 187, 163, 688, 864, 384, 987, 983, 434, 145, 478, 374, 187, 741, 190, 230, 120, 980, 210, 253, 564, 34, 874, 655, 794, 701, 23, 349, 17, 124, 547, 219, 293, 90, 929, 573, 417, 884, 706, 40, 266, 622, 52, 214, 275, 393, 479, 104, 81, 119, 430, 688, 821, 184, 994, 384, 208, 466, 97, 942, 923, 516, 344, 320, 92, 715, 92, 249, 541, 62, 148, 425, 647, 486, 759, 480, 265, 808, 241, 351, 945, 628, 4, 474, 325, 882, 973, 776, 397, 846, 9, 297, 219, 163, 685, 606, 374, 915, 334, 818, 981, 549, 575, 257, 853, 914, 716, 271, 442, 349, 926, 946, 690, 398, 407, 243, 55, 127, 628, 933, 422, 531, 113, 929, 813, 761, 86, 646, 339, 385, 983, 607, 276, 566, 557, 344, 185, 242, 116, 865, 249, 782, 662, 999, 767, 675, 234, 440, 498, 205, 714, 123, 244, 837, 709, 73, 407, 528, 283, 377, 28, 215, 60, 204, 69, 282, 987, 137, 999, 150, 876, 625, 336, 373, 589, 320, 649, 832, 89, 934, 889, 650, 86, 876, 971, 704, 639, 555, 355, 596, 196, 461, 810, 98, 993, 663, 634, 879, 522, 769, 529, 7, 776, 188, 981, 642, 872, 198, 517, 925, 590, 198, 250, 424, 948, 741, 583, 763, 368, 756, 520, 187, 538, 744, 3, 323, 249, 686, 352, 192, 620, 531, 494, 268, 529, 52, 969, 424, 917, 245, 738, 951, 394, 481, 575, 49, 512, 273, 975, 787, 119, 515, 25, 9, 494, 343, 514, 705, 250, 36, 260, 318, 132, 623, 93, 1, 954, 728, 586, 971, 736, 610, 387, 426, 131, 451, 754, 672, 528, 350, 642, 310, 493,
                630, 543, 879, 299, 102, 297, 188, 480, 111, 799, 47, 909, 906, 284, 349, 467, 482, 544, 663, 659, 110, 917, 625, 93, 150, 963, 698, 981, 272, 361, 561};

//        int[] arr= {1,3,1,5};
        long start = System.currentTimeMillis();
        supplyWagon(arr);
        System.out.println(System.currentTimeMillis() - start);
    }

    public static int[] supplyWagon(int[] supplies) {
        int all_len = supplies.length;
        int len = supplies.length / 2;
        int[] res = new int[len];
        boolean[] flag = new boolean[all_len];
        for (int i = 0; i < (all_len - len); i++) {
            int index = 0, second = 0;
            int max = Integer.MAX_VALUE;
            for (int j = 0; j < all_len - 1; ) {
                int k1 = 0, k2 = 0;
                int f = 0, s = 0;
                boolean f1 = false, f2 = false;
                if (!flag[j]) {
                    k1 = supplies[j];
                    f1 = true;
                    f = j;
                }
                j++;
                while (j < all_len && flag[j]) {
                    j++;
                }
                if (j < all_len) {
                    k2 = supplies[j];
                    f2 = true;
                    s = j;
                }
                if (f1 && f2) {
                    if (k1 + k2 < max) {
                        max = k1 + k2;
                        index = f;
                        second = s;
                    }
                }
            }

            flag[second] = true;
            supplies[index] = max;
        }
        int index = 0;
        for (int i = 0; i < all_len; i++) {
            if (!flag[i]) {
                res[index++] = supplies[i];
            }
        }
        return res;
    }
}
